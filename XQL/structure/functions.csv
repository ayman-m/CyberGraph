function,description,example
add,"The add() function adds two positive integers. Parameters may be either integer literals, or integers as a string type such as might be contained in a data field.","dataset = xdr_data | alter mynum = add(action_file_size, 3) | fields action_file_size, mynum | filter action_file_size > 0 | limit 1"
arrayconcat,"The arrayconcat() function accepts two or more arrays, and it joins them into a single array","alter all_arrays = arrayconcat(first_array, second_array, third_array)"
arraycreate,"The arraycreate() function returns an array based on the given parameters defined for the array elements.","dataset = xdr_data | alter x = arraycreate('1', '2') | fields x"
arraydistinct,"The arraydistinct() function accepts an array, and it returns a new array containing only unique elements found in the original array.","dataset = xdr_data | limit 10 | alter test=arraydistinct(split('1,1,1,1,1,3,7',','))"
arrayfilter,"The arrayfilter() function filters the results of an array in one of the following ways.Returns the results when a certain condition is applied to the array, or returns the results when a particular array is set to a specified array element.","dataset = xdr_data | filter dfe_labels != null | alter x = arrayfilter(dfe_labels , '@element' = 'network') | fields x, dfe_labels | limit 100"
arrayindex,"The arrayindex() function returns the value contained in the specified array position. Arrays are 0-based, and negative indexing is supported.","dataset = xdr_data | fields action_local_ip  as alii | alter ip_third_octet = arrayindex(split(alii, '.'), 2) | filter alii != null and alii != '0.0.0.0' | limit 10"
arrayindexof,"The arrayindexof() function enables you to return a value related to an array in one of the following ways. Returns 0 if a particular array is not empty and the specified condition is true. If the condition is not met, a NULL value is returned. Returns the 0-based index of a particular array element if a particular array is not empty and the specified condition using an @element is true. If the condition is not met, a NULL value is returned.","dataset = xdr_data | filter dfe_labels != null | alter x = arrayindexof(dfe_labels , '@element' = 'network') | fields x, dfe_labels | limit 100"
array_length,"The array_length() function returns the number of elements in an array.","dataset = xdr_data | fields action_local_ip as alii | alter ip_len = array_length(split(alii, '.')) | filter alii != null and alii != '0.0.0.0' | limit 1"
arraymap,"The arraymap() function applies a specified function to every element of an array. For functions that require a fieldname, use '@element'.","dataset = xdr_data | alter mac = arraystring (arraymap (json_extract_array (to_json_string(agent_interface_map),'$.'),json_extract_scalar ('@element', '$.mac')), ',')"
arraymerge,"The arraymerge() function returns an array, which is created from a merge of a number of arrays, including merging a number of arraymap() function arrays.","dataset = xdr_data | alter a = arraymerge (arraymap (agent_interface_map, to_json_string (json_extract_array (to_json_string('@element'), '$.ipv4') ) ) )"
arrayrange,"The arrayrange() function returns a portion, or a slice, of an array given a start and end range. Indices are 0-based, and the start range is inclusive, but the end range is exclusive.","dataset = xdr_data | fields dfe_labels | filter dfe_labels != null | limit 100 | alter test = arrayrange(dfe_labels,0,2)"
arraystring,"The arraystring() function returns a string from an array, where each array element is joined by a defined delimiter.","dataset = xdr_data | fields action_app_id_transitions  as aait | alter transitions_string = arraystring(aait, ' : ') | dedup transitions_string by asc _time | filter aait != null"
coalesce,"The coalesce() function takes an arbitrary number of arguments and returns the first value that is not NULL.","dataset = xdr_data | fields actor_primary_username,os_actor_primary_username,causality_actor_primary_username | alter username = coalesce(actor_primary_username,os_actor_primary_username,causality_actor_primary_username)"
concat,"The concat() function joins multiple strings into a single string.","dataset = xdr_data | fields action_boot_time as abt | filter abt != null | alter abt_string = concat('str: ', to_string(abt)) | limit 1"
current_time,"The current_time() function returns a timestamp value representing the current time in the format MMM dd YYYY HH:mm:ss, such as Jul 12th 2021 20:51:34.","dataset = xdr_data | filter timestamp_diff(current_time(),to_timestamp(actor_process_execution_time, 'MILLIS'), 'DAY') > 30"
date_floor,"The date_floor() function converts a timestamp value for a particular field or function result that contains a number, and returns a timestamp rounded down to the nearest whole value of a specified <time unit>, including a year (y), month (mo), week (w), day (d), or hour (h). The <time zone> offset is optional to configure using an hours offset, such as “+08:00”, or using a time zone name from the List of Supported Time Zones, such as 'America/Chicago'. When you do not configure a time zone, the default is UTC.","dataset = xdr_data | filter _time < to_timestamp(add(to_epoch(date_floor(current_time(),'w', 'America/Los_Angeles')),-2073600)) | limit 100"
divide,"The divide() function divides two positive integers. Parameters may be either integer literals, or integers as a string type such as might be contained in a data field.","dataset = xdr_data | alter mynum = divide(action_file_size, 3) | fields action_file_size, mynum | filter action_file_size > 3 | limit 1"
extract_time,"The extract_time() function returns a specified part of a timestamp.","dataset = xdr_data | alter timepart = extract_time(current_time(), 'HOUR') | fields timepart | limit 1"
floor,"The floor() function converts a field that contains a number, and returns an integer rounded down to the nearest whole number."
format_string,"The format_string() function returns a string from a format string that contains zero or more format specifiers, along with a variable length list of additional arguments that matches the format specifiers. A format specifier is initiated by the % symbol, and must map to one or more of the remaining arguments. Usually, this is a one-to-one mapping, except when the * specifier is used. For example:","dataset = xdr_data | filter action_remote_ip_int != null | alter simple_int = format_string('%d', action_remote_ip_int) | fields simple_int | limit 100"
format_timestamp,"The format_timestamp() function returns a string after formatting a timestamp according to a specified string format. The <time zone> is optional to configure. The format_timestamp() function should include an Alter stage. For more information, see the examples below.","dataset = xdr_data | alter new_time = format_timestamp('%Y/%m/%d %H:%M:%S', _time) | fields new_time | limit 100"
if,"The if() function evaluates an expression. If the expression evaluates as True, the function returns the results of evaluating the second function argument. If the expression evaluates as false, the function returns the results of evaluating the third function argument.","dataset = xdr_data | fields action_process_image_name as apin | filter apin != null | alter remove_exe_process = if(lowercase(apin) contains '.exe',  replace(lowercase(apin),'.exe',''), lowercase(apin))  | limit 10"
incidr,"The incidr() function accepts an IPv4 address, and an IPv4 range using CIDR notation, and returns true if the address is in range.","alter my_ip = '192.168.10.14' | alter inrange = incidr(my_ip, '192.168.10.0/24') | fields inrange | limit 1"
incidr6,"The incidr6() function accepts an IPv6 address, and an IPv6 range using CIDR notation, and returns true if the address is in range.","alter my_ip = '3031:3233:3435:3637:3839:4041:4243:4445' | alter inrange = incidr6(my_ip, '3031:3233:3435:3637:0000:0000:0000:0000/64') | fields inrange | limit 1"
incidrlist,"The incidrlist() function accepts a string containing a comma-separated list of IP addresses, and an IP range using CIDR notation, and returns true if all the addresses are in range.","alter inrange = incidrlist('192.168.10.16,192.168.10.3', '192.168.10.0/24') | fields inrange | limit 1"
int_to_ip,"The int_to_ip() function tries to safely convert a signed integer representation of an IPv4 address into its string equivalent.","int_to_ip(75643532)"
ip_to_int,"The ip_to_int() function tries to safely convert a string representation of an IPv4 address into its integer equivalent.","ip_to_int('48.49.50.51')"
json_extract,"The json_extract() function extracts inner JSON objects by retrieving the value from the identified field. The returned datatype is always a string. If the input string does not represent a JSON object, this function fails to parse. To convert a string field to a JSON object, use the to_json_string function.","dataset = xdr_data | fields action_file_device_info as afdi | alter sdn = json_extract(to_json_string(afdi), '$.storage_device_name') | filter afdi != null"



