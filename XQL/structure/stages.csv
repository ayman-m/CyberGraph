stage,description,example
alter,"The alter stage assigns a value to a field name based on the returned value of the function. The field does not have to be known to the dataset or preset schema that you are querying. Further, you can overwrite the current value for a known field using this stage.After defining a field using the alter stage, you can apply other stages, such as filtering, to the new field or field value.","dataset = xdr_data | fields actor_primary_username,os_actor_primary_username,causality_actor_primary_username | alter default_username = coalesce(actor_primary_username, os_actor_primary_username, causality_actor_primary_username) | filter default_username != 'root'"
arrayexpand,"The arrayexpand stage accepts a field that contains an array, and it creates a record in the result set for each item in the array, up to <limit> number of records.","dataset=my_dataset | arrayexpand array_values limit 3"
bin,"The bin stage enables you to group events by quantity or time span. The most common use case is for timecharts. You can add the bin stage to your queries using two different formats depending on whether you are grouping events by quantity or time span. Currently, the bin stage is only supported using the equal sign (=) operator in your queries without any boolean operators (and, or). When you group events of a particular field by quantity, the bin stage is used with bins to define how to divide the events.","dataset = xdr_data | filter action_total_upload != 0 and action_total_upload != null  | bin action_total_upload bins = 50 | limit 1000"
call,"The call stage is used to reference a predefined query from the Query Library, including your Personal Query Library.","call 'CreateRole operation parsed to fields' | filter accessKeyId = '1234' | limit 100"
comp approx_count,"The approx_count approximate aggregate is a comp function that counts the number of distinct values in the given field, and returns an approximate result as a single interger value, for all records that contain matching values for the fields identified in the by clause. Use this approximate aggregate function to produce approximate results, instead of exact results used with regular aggregate functions, which are more scalable in terms of memory usage and time.","dataset = xdr_data | fields event_id | comp approx_count(event_id)"
comp approx_quantiles,"The approx_quantiles approximate aggregate is a comp function returns the approximate boundaries for a group of distinct or non-distinct values (default false) for the specified field, for all records that contain matching values for the fields identified in the by clause. This function returns an array of <number> + 1 elements, where the first element is the approximate minimum and the last element is the approximate maximum. Use this approximate aggregate function to produce approximate results, instead of exact results used with regular aggregate functions, which are more scalable in terms of memory usage and time.","dataset = xdr_data | fields event_id | comp approx_quantiles(event_id, 100, true)"
comp approx_top,"The approx_top approximate aggregate is a comp function that, depending on the number of parameters, returns either an approximate count or sum of top elements for the given field, for all records that contain matching values for the fields identified in the by clause. When a third parameter is specified, it references a field that contains a numeric value (weight) that is used to calculate a sum. The return value is an array with up to <number> of JSON strings. Each string represents an object (struct) containing 2 keys and corresponding values. The keys depend on whether a third parameter has been supplied or no","dataset = xdr_data | fields agent_id | comp approx_top(agent_id, 10)"
comp avg,"The avg aggregation is a comp function that returns the average value of an integer field, for all records that contain matching values for the fields identified in the by clause.","dataset = xdr_data | fields actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download | filter Download > 0 | limit 100 | comp avg(Download) as average_download by Process_Path, Process_CMD addrawdata = true as raw_data"
comp count,"The count aggregation is a comp function that returns a count of the number of values found for a field, for all records that contain matching values for the fields identified in the by clause.","dataset = xdr_data| fields actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download | filter Download > 0 | limit 100 | comp count(Process_Path) as num_process_path by process_path, process_cmd addrawdata = true as raw_data | sort desc process_path"
comp count_distinct,"The count_distinct aggregation is a comp function that returns a count of the number of unique values found for a field, for all records that contain matching values for the fields identified in the by clause.","dataset = xdr_data | fields actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download | filter Download > 0 | limit 100 | comp count_distinct(Process_Path) as num_process_path by process_path, process_cmd addrawdata = true as raw_data | sort desc process_path"
comp earliest,"The earliest aggregation is a comp function that returns the chronologically earliest value found for a field that has matching values for the fields identified in the by clause.","dataset = xdr_data | fields _time, actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download | filter Download > 0 | limit 100 | comp earliest(_time) as download_time by Process_Path, Process_CMD addrawdata = true as raw_data"
comp first,"The first aggregation is a comp function that returns the first value found for a field in the dataset that has matching values for the fields identified in the by clause.","dataset = xdr_data | fields _time,actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download | filter Download > 0 | limit 100 | comp first(_time) as download_time by Process_Path, Process_CMD addrawdata = tr"
comp last,"The last aggregation is a comp function that returns the last value found for a field in the dataset that has matching values for the fields identified in the by clause.","dataset = xdr_data | fields _time, actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download | filter Download > 0 | limit 100 | comp last(_time) as download_time by Process_Path, Process_CMD addrawdata = true as raw_data"
comp latest,"The latest aggregation is a comp function that returns the chronologically latest value found for a field that has matching values for the fields identified in the by clause.","dataset = xdr_data | fields _time, actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download | filter Download > 0 | limit 100 | comp latest(_time) as download_time by Process_Path, Process_CMD addrawdata = true as raw_data"
comp list,"The list aggregation is a comp function that returns an array of up to 100 values found for a given field, for all records that contain matching values for the fields identified in the by clause. The array values are all non-null, so null values are filtered out. The values returned in the array are non-unique, so if a value repeats multiple times it is included as part of the list of up to 100 values.","dataset = xdr_data | fields actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download Download | filter Download > 0 | limit 100 | comp list(Download) as list_download by Process_Path, Process_CMD addrawdata = true as raw_data"
comp max,"The max aggregation is a comp function that returns the maximum value of an integer field, for all records that contain matching values for the fields identified in the by clause.","dataset = xdr_data | fields actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download | filter Download > 0 | limit 100 | comp max(Download) as max_download by Process_Path, Process_CMD addrawdata = true as raw_data"
comp min,"The min aggregation is a comp function that returns the minimum value of an integer field, for all records that contain matching values for the fields identified in the by clause.","dataset = xdr_data | fields actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download | filter Download > 0 | limit 100 | comp min(Download) as min_download by Process_Path, Process_CMD addrawdata = true as raw_data"
comp sum,"The sum aggregation is a comp function that returns the sum of an integer field, for all records that contain matching values for the fields identified in the by clause.","dataset = xdr_data | fields actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download | filter Download > 0 | limit 100 | comp sum(Download) as total_download by Process_Path, Process_CMD addrawdata = true as raw_data"
comp values,"The values aggregation is a comp function that returns an array of all the values found for a given field, for all records that contain matching values for the fields identified in the by clause. The array values are all non-null. Each value appears in the array only once, even if a given value repeats multiple times in the result set. You can also define a different name for the field, which is displayed in the results table, by setting an alias using the syntax as <alias>. An alias for the field is optional to configure.","dataset = xdr_data | fields actor_process_image_path as Process_Path, actor_process_command_line as Process_CMD, action_total_download as Download | filter Download > 0 | limit 100 | comp values(Download) as values_download by Process_Path, Process_CMD addrawdata = true as raw_data"
config case_sensitive,"The case_sensitive configuration identifies whether field values are evaluated as case sensitive or case insensitive. The config case_sensitive stage must be added at the beginning of the query. You can also add another config case_sensitive stage when adding a Join or Union stage to a query.","config case_sensitive = true | dataset = xdr_data | fields actor_process_image_name as apin | filter apin != NULL and apin contains 'python' | limit 100"
config timeframe,"The timeframe configuration enables you to perform searches within a specific time frame from the query execution. The results for the time frame are based on times listed in the _Time column in the results table. You can add the timeframe configuration to your queries using different formats depending on whether the time frame you are setting is an exact time or relative time.","config timeframe = 10h | dataset = xdr_data | limit 100"
dedup,"The dedup stage removes all records that contain duplicate values (or duplicate sets of values) from the result set. The record that is returned is identified by the by clause, which selects the record by either the first or last occurance of the field specified in this clause.","dataset = xdr_data | fields actor_primary_username as apu | filter apu != null | dedup apu by asc _time"
fields,"The fields stage identifies which fields are returned in the result set. If this stage is used, then subsequent stages can operate only on the fields identified by this stage. The syntax for this stage differs depending on the type of query you are running.Use a wildcard (*) to include all fields that match the pattern, where wildcards can only be added at the beginning or end of a string.Use a minus character (-) to exclude a field from the result set.Use the as clause to set an alias for a field. Use a fieldset within the fields stage to refine queries on the XDM by limiting the analysis to a specific set of fields.","dataset = xdr_data | fields action_country as ac | fields event_* | fields - event_type | filter ac != null and ac != "
filter,"The filter stage identifies which data records should be returned by the query. Filters are boolean expressions that can use a wide range of functions and operators to express the filter. If a record matches the filter (that is, the filter expression returns True when applied to the record), then the record is returned in the query's result set. The functions you can use with a filter are described in XQL Functions Reference. For a list of supported operators, see Supported Operators.","datamodel | filter xdm.source.user.username = 'newman' | fields xdm.source.*, xdm.email.*"
join,"The join() stage combines the results of two queries into a single result set. This stage is conceptually identical to a SQL join.","dataset  = microsoft_windows_raw | join (dataset = xdr_data | filter event_type = EVENT_LOG | fields actor_process_image_name, event_id ) as edr edr.event_id = edr_event_id"
iploc, "The iploc stage associates the IPv4 address of any field to a list of predefined attributes related to the geolocation. By default, when using this stage in your queries, the geolocation data is added to the results table in these predefined column names: LOC_ASN_ORG, LOC_ASN, LOC_CITY, LOC_CONTINENT, LOC_COUNTRY, LOC_LATLON, LOC_REGION, and LOC_TIMEZONE.","dataset = xdr_data | limit 1000 | filter action_remote_ip != null | iploc action_remote_ip loc_city as city, loc_latlon"
limit,"The limit stage sets the maximum number of records that can be returned in the result set. To help reduce the Cortex Query Language (XQL) response time, the default results for a Cortex Data Model (XDM) query or an XQL basic query is limited to 1000, when  no limit is explicitly stated in the query. This applies to basic queries with no stages except the fields stage. This default limit does not apply to widgets, Correlation Rules, public APIs, saved queries, or scheduled queries, where the limit is a maximum of 1,000,000 results.","dataset = xdr_data | limit 10"
replacenull,"The replacenull stage replaces null field values with the specified string. This guarantees that every field in your result set will contain a value.If you use the replacenull stage, then all subsequent stages that refer to the field's null value must use the replacement string.","dataset = xdr_data | fields action_country as ac | replacenull ac = 'N/A' | filter ac = 'N/A'"
sort,"The sort stage identifies the sort order for records returned in the result set. Records can be returned in ascending (asc) or descending (desc) order. If you provide more than one field to the sort stage, records are sorted in field specification order.","dataset = xdr_data  | fields action_country as ac, event_timestamp as et | replacenull ac = 'N/A' | filter ac != '-' | sort desc ac, asc et"
target,"The target() stage saves query results to a named dataset or lookup. These are persistent and can be used in subsequent queries. This stage must be the last stage specified in the query.","dataset = xdr_data | fields action_boot_time as abt | filter abt != null | target type=dataset abt_dataset"
top,"The top stage returns the approximate count of top elements for a given field and the percentage of the count results relative to the total number of values for the designated field. Use this top stage to produce approximate results, which are more scalable in terms of memory usage and time.","dataset = xdr_data | top 1 event_id by action_country top_count as total"
transaction,"The transaction stage is used to find transactions based on events that meet certain constraints. This stage aggregates all fields in a JSON string array by fields defined as transaction fields. For example, using the transaction stage to find transactions based on the user and user_ip fields will make the  aggregation of json strings of all fields by the user and user_ip fields. A maximum of 50 fields can be aggregated in a transation stage.","dataset=xdr_data | transaction user, agent_id span=1h timeshift = 1615353499 timezone = '+08:00' maxevents=10"
union,"The union() stage combines two result sets into one result. It can be used in two different ways. If a dataset name is provided with no other arguments, then the two datasets are combined for the duration of the query, and the fields in both datasets are available to subsequent stages.","dataset = xdr_data | filter event_type = PROCESS and event_sub_type = PROCESS_START | union file_events | fields agent_id, agent_hostname, file_hash, actor_process_image_path as executed_by, actor_process_signature_vendor as executor_signer | filter file_hash != null and executed_by != null"
view,"The view() stage configures the display of the result set. It can be used in different ways.If you use highlight, the view stage highlights specified strings that Cortex XSIAM finds on specified fields. The highlight values that you provide are performed as a substring search, so only partial value can be highlighted in the final results table.If you use graph, the view stage creates a column, line, or pie chart based on the values found for the fields specified on the xaxis and yaxis parameters. In this mode, view also offers a large number of parameters that allow you to control colors, decorations, and other behavior used for the final chart.If you use column order, the view stage enables you to list the query results by popularity, where the most non-null returned fields are displayed first using the syntax view column order = populated. By default, if column order is not defined (or view column order=default), the original column order is used.","dataset = xdr_data | fields event_type, event_sub_type | dedup event_type, event_sub_type by asc _time | view highlight fields = event_sub_type values = 'STREAM'"
